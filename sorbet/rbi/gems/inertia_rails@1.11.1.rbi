# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `inertia_rails` gem.
# Please instead update this file by running `bin/tapioca gem inertia_rails`.

# typed: strict

module InertiaDebugExceptions
  def render_for_browser_request(request, wrapper); end
end

module InertiaRails
  def threadsafe_shared_blocks; end
  def threadsafe_shared_blocks=(obj); end
  def threadsafe_shared_plain_data; end
  def threadsafe_shared_plain_data=(obj); end

  class << self
    def configure; end
    def evaluated_blocks(controller, blocks); end
    def layout; end
    def lazy(value = T.unsafe(nil), &block); end
    def reset!; end
    def share(**args); end
    def share_block(block); end
    def shared_blocks; end
    def shared_blocks=(val); end
    def shared_data(controller); end
    def shared_plain_data; end
    def shared_plain_data=(val); end
    def threadsafe_shared_blocks; end
    def threadsafe_shared_blocks=(obj); end
    def threadsafe_shared_plain_data; end
    def threadsafe_shared_plain_data=(obj); end
    def version; end
  end
end

module InertiaRails::Configuration
  def layout; end
  def layout=(val); end
  def version; end
  def version=(val); end

  class << self
    def evaluated_version; end
    def layout; end
    def layout=(val); end
    def version; end
    def version=(val); end
  end
end

module InertiaRails::Controller
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::InertiaRails::Controller::ClassMethods

  def redirect_back(fallback_location:, allow_other_host: T.unsafe(nil), **options); end
  def redirect_to(options = T.unsafe(nil), response_options = T.unsafe(nil)); end

  private

  def capture_inertia_errors(options); end
  def inertia_location(url); end
end

module InertiaRails::Controller::ClassMethods
  def inertia_share(**args, &block); end
end

class InertiaRails::Engine < ::Rails::Engine; end
class InertiaRails::Error < ::StandardError; end

class InertiaRails::Lazy
  def initialize(value = T.unsafe(nil), &block); end

  def call; end
  def to_proc; end
end

class InertiaRails::Middleware
  def initialize(app); end

  def call(env); end
end

class InertiaRails::Middleware::InertiaRailsRequest
  def initialize(app, env); end

  def response; end

  private

  def force_refresh(request); end
  def get?; end
  def inertia_non_post_redirect?(status); end
  def inertia_request?; end
  def inertia_version; end
  def keep_inertia_errors?(status); end
  def non_get_redirectable_method?; end
  def redirect_status?(status); end
  def request_method; end
  def saved_version; end
  def sent_version; end
  def stale_inertia_get?; end
  def stale_inertia_request?; end
  def version_stale?; end
end

class InertiaRails::Renderer
  def initialize(component, controller, request, response, render_method, props:, view_data:); end

  def component; end
  def render; end
  def view_data; end

  private

  def deep_transform_values(hash, proc); end
  def page; end
  def partial_keys; end
  def props; end
  def rendering_partial_component?; end
end

class InertiaRails::StaticController < ::ApplicationController
  def static; end

  private

  def _layout(lookup_context, formats); end

  class << self
    def middleware_stack; end
  end
end
